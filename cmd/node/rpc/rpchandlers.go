// generated by go run gen.go; DO NOT EDIT

package rpc

import (
	"github.com/p9c/pod/pkg/rpc/btcjson"
)

type API struct {
	Ch     interface{}
	Params interface{}
}

var RPCHandlersBeforeInit = map[string]CommandHandler{
	"addnode":{ 
		Fn: HandleAddNode, 
		Call: make(chan API), 
		Result: func() API {
			return API{
				Ch: make(chan AddNodeRes),
			}
		},
	}, 
	"createrawtransaction":{ 
		Fn: HandleCreateRawTransaction, 
		Call: make(chan API), 
		Result: func() API {
			return API{
				Ch: make(chan CreateRawTransactionRes),
			}
		},
	}, 
	"decoderawtransaction":{ 
		Fn: HandleDecodeRawTransaction, 
		Call: make(chan API), 
		Result: func() API {
			return API{
				Ch: make(chan DecodeRawTransactionRes),
			}
		},
	}, 
	"decodescript":{ 
		Fn: HandleDecodeScript, 
		Call: make(chan API), 
		Result: func() API {
			return API{
				Ch: make(chan DecodeScriptRes),
			}
		},
	}, 
	"estimatefee":{ 
		Fn: HandleEstimateFee, 
		Call: make(chan API), 
		Result: func() API {
			return API{
				Ch: make(chan EstimateFeeRes),
			}
		},
	}, 
	"generate":{ 
		Fn: HandleGenerate, 
		Call: make(chan API), 
		Result: func() API {
			return API{
				Ch: make(chan GenerateRes),
			}
		},
	}, 
	"getaddednodeinfo":{ 
		Fn: HandleGetAddedNodeInfo, 
		Call: make(chan API), 
		Result: func() API {
			return API{
				Ch: make(chan GetAddedNodeInfoRes),
			}
		},
	}, 
	"getbestblock":{ 
		Fn: HandleGetBestBlock, 
		Call: make(chan API), 
		Result: func() API {
			return API{
				Ch: make(chan GetBestBlockRes),
			}
		},
	}, 
	"getbestblockhash":{ 
		Fn: HandleGetBestBlockHash, 
		Call: make(chan API), 
		Result: func() API {
			return API{
				Ch: make(chan GetBestBlockHashRes),
			}
		},
	}, 
	"getblock":{ 
		Fn: HandleGetBlock, 
		Call: make(chan API), 
		Result: func() API {
			return API{
				Ch: make(chan GetBlockRes),
			}
		},
	}, 
	"getblockchaininfo":{ 
		Fn: HandleGetBlockChainInfo, 
		Call: make(chan API), 
		Result: func() API {
			return API{
				Ch: make(chan GetBlockChainInfoRes),
			}
		},
	}, 
	"getblockcount":{ 
		Fn: HandleGetBlockCount, 
		Call: make(chan API), 
		Result: func() API {
			return API{
				Ch: make(chan GetBlockCountRes),
			}
		},
	}, 
	"getblockhash":{ 
		Fn: HandleGetBlockHash, 
		Call: make(chan API), 
		Result: func() API {
			return API{
				Ch: make(chan GetBlockHashRes),
			}
		},
	}, 
	"getblockheader":{ 
		Fn: HandleGetBlockHeader, 
		Call: make(chan API), 
		Result: func() API {
			return API{
				Ch: make(chan GetBlockHeaderRes),
			}
		},
	}, 
	"getblocktemplate":{ 
		Fn: HandleGetBlockTemplate, 
		Call: make(chan API), 
		Result: func() API {
			return API{
				Ch: make(chan GetBlockTemplateRes),
			}
		},
	}, 
	"getcfilter":{ 
		Fn: HandleGetCFilter, 
		Call: make(chan API), 
		Result: func() API {
			return API{
				Ch: make(chan GetCFilterRes),
			}
		},
	}, 
	"getcfilterheader":{ 
		Fn: HandleGetCFilterHeader, 
		Call: make(chan API), 
		Result: func() API {
			return API{
				Ch: make(chan GetCFilterHeaderRes),
			}
		},
	}, 
	"getconnectioncount":{ 
		Fn: HandleGetConnectionCount, 
		Call: make(chan API), 
		Result: func() API {
			return API{
				Ch: make(chan GetConnectionCountRes),
			}
		},
	}, 
	"getcurrentnet":{ 
		Fn: HandleGetCurrentNet, 
		Call: make(chan API), 
		Result: func() API {
			return API{
				Ch: make(chan GetCurrentNetRes),
			}
		},
	}, 
	"getdifficulty":{ 
		Fn: HandleGetDifficulty, 
		Call: make(chan API), 
		Result: func() API {
			return API{
				Ch: make(chan GetDifficultyRes),
			}
		},
	}, 
	"getgenerate":{ 
		Fn: HandleGetGenerate, 
		Call: make(chan API), 
		Result: func() API {
			return API{
				Ch: make(chan GetGenerateRes),
			}
		},
	}, 
	"gethashespersec":{ 
		Fn: HandleGetHashesPerSec, 
		Call: make(chan API), 
		Result: func() API {
			return API{
				Ch: make(chan GetHashesPerSecRes),
			}
		},
	}, 
	"getheaders":{ 
		Fn: HandleGetHeaders, 
		Call: make(chan API), 
		Result: func() API {
			return API{
				Ch: make(chan GetHeadersRes),
			}
		},
	}, 
	"getinfo":{ 
		Fn: HandleGetInfo, 
		Call: make(chan API), 
		Result: func() API {
			return API{
				Ch: make(chan GetInfoRes),
			}
		},
	}, 
	"getmempoolinfo":{ 
		Fn: HandleGetMempoolInfo, 
		Call: make(chan API), 
		Result: func() API {
			return API{
				Ch: make(chan GetMempoolInfoRes),
			}
		},
	}, 
	"getmininginfo":{ 
		Fn: HandleGetMiningInfo, 
		Call: make(chan API), 
		Result: func() API {
			return API{
				Ch: make(chan GetMiningInfoRes),
			}
		},
	}, 
	"getnettotals":{ 
		Fn: HandleGetNetTotals, 
		Call: make(chan API), 
		Result: func() API {
			return API{
				Ch: make(chan GetNetTotalsRes),
			}
		},
	}, 
	"getnetworkhashps":{ 
		Fn: HandleGetNetworkHashPS, 
		Call: make(chan API), 
		Result: func() API {
			return API{
				Ch: make(chan GetNetworkHashPSRes),
			}
		},
	}, 
	"getpeerinfo":{ 
		Fn: HandleGetPeerInfo, 
		Call: make(chan API), 
		Result: func() API {
			return API{
				Ch: make(chan GetPeerInfoRes),
			}
		},
	}, 
	"getrawmempool":{ 
		Fn: HandleGetRawMempool, 
		Call: make(chan API), 
		Result: func() API {
			return API{
				Ch: make(chan GetRawMempoolRes),
			}
		},
	}, 
	"getrawtransaction":{ 
		Fn: HandleGetRawTransaction, 
		Call: make(chan API), 
		Result: func() API {
			return API{
				Ch: make(chan GetRawTransactionRes),
			}
		},
	}, 
	"gettxout":{ 
		Fn: HandleGetTxOut, 
		Call: make(chan API), 
		Result: func() API {
			return API{
				Ch: make(chan GetTxOutRes),
			}
		},
	}, 
	"help":{ 
		Fn: HandleHelp, 
		Call: make(chan API), 
		Result: func() API {
			return API{
				Ch: make(chan HelpRes),
			}
		},
	}, 
	"node":{ 
		Fn: HandleNode, 
		Call: make(chan API), 
		Result: func() API {
			return API{
				Ch: make(chan NodeRes),
			}
		},
	}, 
	"ping":{ 
		Fn: HandlePing, 
		Call: make(chan API), 
		Result: func() API {
			return API{
				Ch: make(chan PingRes),
			}
		},
	}, 
	"searchrawtransactions":{ 
		Fn: HandleSearchRawTransactions, 
		Call: make(chan API), 
		Result: func() API {
			return API{
				Ch: make(chan SearchRawTransactionsRes),
			}
		},
	}, 
	"sendrawtransaction":{ 
		Fn: HandleSendRawTransaction, 
		Call: make(chan API), 
		Result: func() API {
			return API{
				Ch: make(chan SendRawTransactionRes),
			}
		},
	}, 
	"setgenerate":{ 
		Fn: HandleSetGenerate, 
		Call: make(chan API), 
		Result: func() API {
			return API{
				Ch: make(chan SetGenerateRes),
			}
		},
	}, 
	"stop":{ 
		Fn: HandleStop, 
		Call: make(chan API), 
		Result: func() API {
			return API{
				Ch: make(chan StopRes),
			}
		},
	}, 
	"restart":{ 
		Fn: HandleRestart, 
		Call: make(chan API), 
		Result: func() API {
			return API{
				Ch: make(chan RestartRes),
			}
		},
	}, 
	"resetchain":{ 
		Fn: HandleResetChain, 
		Call: make(chan API), 
		Result: func() API {
			return API{
				Ch: make(chan ResetChainRes),
			}
		},
	}, 
	"submitblock":{ 
		Fn: HandleSubmitBlock, 
		Call: make(chan API), 
		Result: func() API {
			return API{
				Ch: make(chan SubmitBlockRes),
			}
		},
	}, 
	"uptime":{ 
		Fn: HandleUptime, 
		Call: make(chan API), 
		Result: func() API {
			return API{
				Ch: make(chan UptimeRes),
			}
		},
	}, 
	"validateaddress":{ 
		Fn: HandleValidateAddress, 
		Call: make(chan API), 
		Result: func() API {
			return API{
				Ch: make(chan ValidateAddressRes),
			}
		},
	}, 
	"verifychain":{ 
		Fn: HandleVerifyChain, 
		Call: make(chan API), 
		Result: func() API {
			return API{
				Ch: make(chan VerifyChainRes),
			}
		},
	}, 
	"verifymessage":{ 
		Fn: HandleVerifyMessage, 
		Call: make(chan API), 
		Result: func() API {
			return API{
				Ch: make(chan VerifyMessageRes),
			}
		},
	}, 
	"version":{ 
		Fn: HandleVersion, 
		Call: make(chan API), 
		Result: func() API {
			return API{
				Ch: make(chan VersionRes),
			}
		},
	}, 

}

type (
	None struct{} 
	AddNodeRes struct {
		Res None
		Err error
	}
	
	CreateRawTransactionRes struct {
		Res string
		Err error
	}
	
	DecodeRawTransactionRes struct {
		Res btcjson.TxRawDecodeResult
		Err error
	}
	
	DecodeScriptRes struct {
		Res btcjson.DecodeScriptResult
		Err error
	}
	
	EstimateFeeRes struct {
		Res float64
		Err error
	}
	
	GenerateRes struct {
		Res []string
		Err error
	}
	
	GetAddedNodeInfoRes struct {
		Res []btcjson.GetAddedNodeInfoResultAddr
		Err error
	}
	
	GetBestBlockRes struct {
		Res btcjson.GetBestBlockResult
		Err error
	}
	
	GetBestBlockHashRes struct {
		Res string
		Err error
	}
	
	GetBlockRes struct {
		Res btcjson.GetBlockVerboseResult
		Err error
	}
	
	GetBlockChainInfoRes struct {
		Res btcjson.GetBlockChainInfoResult
		Err error
	}
	
	GetBlockCountRes struct {
		Res int64
		Err error
	}
	
	GetBlockHashRes struct {
		Res string
		Err error
	}
	
	GetBlockHeaderRes struct {
		Res btcjson.GetBlockHeaderVerboseResult
		Err error
	}
	
	GetBlockTemplateRes struct {
		Res string
		Err error
	}
	
	GetCFilterRes struct {
		Res string
		Err error
	}
	
	GetCFilterHeaderRes struct {
		Res string
		Err error
	}
	
	GetConnectionCountRes struct {
		Res int32
		Err error
	}
	
	GetCurrentNetRes struct {
		Res string
		Err error
	}
	
	GetDifficultyRes struct {
		Res float64
		Err error
	}
	
	GetGenerateRes struct {
		Res bool
		Err error
	}
	
	GetHashesPerSecRes struct {
		Res float64
		Err error
	}
	
	GetHeadersRes struct {
		Res []string
		Err error
	}
	
	GetInfoRes struct {
		Res btcjson.InfoChainResult0
		Err error
	}
	
	GetMempoolInfoRes struct {
		Res btcjson.GetMempoolInfoResult
		Err error
	}
	
	GetMiningInfoRes struct {
		Res btcjson.GetMiningInfoResult
		Err error
	}
	
	GetNetTotalsRes struct {
		Res btcjson.GetNetTotalsResult
		Err error
	}
	
	GetNetworkHashPSRes struct {
		Res []btcjson.GetPeerInfoResult
		Err error
	}
	
	GetPeerInfoRes struct {
		Res []btcjson.GetPeerInfoResult
		Err error
	}
	
	GetRawMempoolRes struct {
		Res []string
		Err error
	}
	
	GetRawTransactionRes struct {
		Res string
		Err error
	}
	
	GetTxOutRes struct {
		Res string
		Err error
	}
	
	HelpRes struct {
		Res string
		Err error
	}
	
	NodeRes struct {
		Res None
		Err error
	}
	
	PingRes struct {
		Res None
		Err error
	}
	
	SearchRawTransactionsRes struct {
		Res []btcjson.SearchRawTransactionsResult
		Err error
	}
	
	SendRawTransactionRes struct {
		Res None
		Err error
	}
	
	SetGenerateRes struct {
		Res None
		Err error
	}
	
	StopRes struct {
		Res None
		Err error
	}
	
	RestartRes struct {
		Res None
		Err error
	}
	
	ResetChainRes struct {
		Res None
		Err error
	}
	
	SubmitBlockRes struct {
		Res string
		Err error
	}
	
	UptimeRes struct {
		Res btcjson.GetMempoolInfoResult
		Err error
	}
	
	ValidateAddressRes struct {
		Res btcjson.ValidateAddressChainResult
		Err error
	}
	
	VerifyChainRes struct {
		Res bool
		Err error
	}
	
	VerifyMessageRes struct {
		Res bool
		Err error
	}
	
	VersionRes struct {
		Res map[string]btcjson.VersionResult
		Err error
	}
	
)

func (a API) AddNode(cmd btcjson.AddNodeCmd) (err error) {
		RPCHandlers["addnode"].Call <- API{a.Ch, cmd}
		return
}

func (a API) CreateRawTransaction(cmd btcjson.CreateRawTransactionCmd) (err error) {
		RPCHandlers["createrawtransaction"].Call <- API{a.Ch, cmd}
		return
}

func (a API) DecodeRawTransaction(cmd btcjson.DecodeRawTransactionCmd) (err error) {
		RPCHandlers["decoderawtransaction"].Call <- API{a.Ch, cmd}
		return
}

func (a API) DecodeScript(cmd btcjson.DecodeScriptCmd) (err error) {
		RPCHandlers["decodescript"].Call <- API{a.Ch, cmd}
		return
}

func (a API) EstimateFee(cmd btcjson.EstimateFeeCmd) (err error) {
		RPCHandlers["estimatefee"].Call <- API{a.Ch, cmd}
		return
}

func (a API) Generate(cmd None) (err error) {
		RPCHandlers["generate"].Call <- API{a.Ch, cmd}
		return
}

func (a API) GetAddedNodeInfo(cmd btcjson.GetAddedNodeInfoCmd) (err error) {
		RPCHandlers["getaddednodeinfo"].Call <- API{a.Ch, cmd}
		return
}

func (a API) GetBestBlock(cmd None) (err error) {
		RPCHandlers["getbestblock"].Call <- API{a.Ch, cmd}
		return
}

func (a API) GetBestBlockHash(cmd None) (err error) {
		RPCHandlers["getbestblockhash"].Call <- API{a.Ch, cmd}
		return
}

func (a API) GetBlock(cmd btcjson.GetBlockCmd) (err error) {
		RPCHandlers["getblock"].Call <- API{a.Ch, cmd}
		return
}

func (a API) GetBlockChainInfo(cmd None) (err error) {
		RPCHandlers["getblockchaininfo"].Call <- API{a.Ch, cmd}
		return
}

func (a API) GetBlockCount(cmd None) (err error) {
		RPCHandlers["getblockcount"].Call <- API{a.Ch, cmd}
		return
}

func (a API) GetBlockHash(cmd btcjson.GetBlockHashCmd) (err error) {
		RPCHandlers["getblockhash"].Call <- API{a.Ch, cmd}
		return
}

func (a API) GetBlockHeader(cmd btcjson.GetBlockHeaderCmd) (err error) {
		RPCHandlers["getblockheader"].Call <- API{a.Ch, cmd}
		return
}

func (a API) GetBlockTemplate(cmd btcjson.GetBlockTemplateCmd) (err error) {
		RPCHandlers["getblocktemplate"].Call <- API{a.Ch, cmd}
		return
}

func (a API) GetCFilter(cmd btcjson.GetCFilterCmd) (err error) {
		RPCHandlers["getcfilter"].Call <- API{a.Ch, cmd}
		return
}

func (a API) GetCFilterHeader(cmd btcjson.GetCFilterHeaderCmd) (err error) {
		RPCHandlers["getcfilterheader"].Call <- API{a.Ch, cmd}
		return
}

func (a API) GetConnectionCount(cmd None) (err error) {
		RPCHandlers["getconnectioncount"].Call <- API{a.Ch, cmd}
		return
}

func (a API) GetCurrentNet(cmd None) (err error) {
		RPCHandlers["getcurrentnet"].Call <- API{a.Ch, cmd}
		return
}

func (a API) GetDifficulty(cmd btcjson.GetDifficultyCmd) (err error) {
		RPCHandlers["getdifficulty"].Call <- API{a.Ch, cmd}
		return
}

func (a API) GetGenerate(cmd btcjson.GetHeadersCmd) (err error) {
		RPCHandlers["getgenerate"].Call <- API{a.Ch, cmd}
		return
}

func (a API) GetHashesPerSec(cmd None) (err error) {
		RPCHandlers["gethashespersec"].Call <- API{a.Ch, cmd}
		return
}

func (a API) GetHeaders(cmd btcjson.GetHeadersCmd) (err error) {
		RPCHandlers["getheaders"].Call <- API{a.Ch, cmd}
		return
}

func (a API) GetInfo(cmd None) (err error) {
		RPCHandlers["getinfo"].Call <- API{a.Ch, cmd}
		return
}

func (a API) GetMempoolInfo(cmd None) (err error) {
		RPCHandlers["getmempoolinfo"].Call <- API{a.Ch, cmd}
		return
}

func (a API) GetMiningInfo(cmd None) (err error) {
		RPCHandlers["getmininginfo"].Call <- API{a.Ch, cmd}
		return
}

func (a API) GetNetTotals(cmd None) (err error) {
		RPCHandlers["getnettotals"].Call <- API{a.Ch, cmd}
		return
}

func (a API) GetNetworkHashPS(cmd btcjson.GetNetworkHashPSCmd) (err error) {
		RPCHandlers["getnetworkhashps"].Call <- API{a.Ch, cmd}
		return
}

func (a API) GetPeerInfo(cmd None) (err error) {
		RPCHandlers["getpeerinfo"].Call <- API{a.Ch, cmd}
		return
}

func (a API) GetRawMempool(cmd btcjson.GetRawMempoolCmd) (err error) {
		RPCHandlers["getrawmempool"].Call <- API{a.Ch, cmd}
		return
}

func (a API) GetRawTransaction(cmd btcjson.GetRawTransactionCmd) (err error) {
		RPCHandlers["getrawtransaction"].Call <- API{a.Ch, cmd}
		return
}

func (a API) GetTxOut(cmd btcjson.GetTxOutCmd) (err error) {
		RPCHandlers["gettxout"].Call <- API{a.Ch, cmd}
		return
}

func (a API) Help(cmd btcjson.HelpCmd) (err error) {
		RPCHandlers["help"].Call <- API{a.Ch, cmd}
		return
}

func (a API) Node(cmd btcjson.NodeCmd) (err error) {
		RPCHandlers["node"].Call <- API{a.Ch, cmd}
		return
}

func (a API) Ping(cmd None) (err error) {
		RPCHandlers["ping"].Call <- API{a.Ch, cmd}
		return
}

func (a API) SearchRawTransactions(cmd btcjson.SearchRawTransactionsCmd) (err error) {
		RPCHandlers["searchrawtransactions"].Call <- API{a.Ch, cmd}
		return
}

func (a API) SendRawTransaction(cmd btcjson.SendRawTransactionCmd) (err error) {
		RPCHandlers["sendrawtransaction"].Call <- API{a.Ch, cmd}
		return
}

func (a API) SetGenerate(cmd btcjson.SetGenerateCmd) (err error) {
		RPCHandlers["setgenerate"].Call <- API{a.Ch, cmd}
		return
}

func (a API) Stop(cmd None) (err error) {
		RPCHandlers["stop"].Call <- API{a.Ch, cmd}
		return
}

func (a API) Restart(cmd None) (err error) {
		RPCHandlers["restart"].Call <- API{a.Ch, cmd}
		return
}

func (a API) ResetChain(cmd None) (err error) {
		RPCHandlers["resetchain"].Call <- API{a.Ch, cmd}
		return
}

func (a API) SubmitBlock(cmd btcjson.SubmitBlockCmd) (err error) {
		RPCHandlers["submitblock"].Call <- API{a.Ch, cmd}
		return
}

func (a API) Uptime(cmd None) (err error) {
		RPCHandlers["uptime"].Call <- API{a.Ch, cmd}
		return
}

func (a API) ValidateAddress(cmd btcjson.ValidateAddressCmd) (err error) {
		RPCHandlers["validateaddress"].Call <- API{a.Ch, cmd}
		return
}

func (a API) VerifyChain(cmd btcjson.VerifyChainCmd) (err error) {
		RPCHandlers["verifychain"].Call <- API{a.Ch, cmd}
		return
}

func (a API) VerifyMessage(cmd btcjson.VerifyMessageCmd) (err error) {
		RPCHandlers["verifymessage"].Call <- API{a.Ch, cmd}
		return
}

func (a API) Version(cmd btcjson.VersionCmd) (err error) {
		RPCHandlers["version"].Call <- API{a.Ch, cmd}
		return
}

