package fynegui

import (
	"fmt"
	"time"

	"fyne.io/fyne"
	"fyne.io/fyne/layout"
	"fyne.io/fyne/widget"
	"github.com/p9c/pod/cmd/node/con"
	"github.com/p9c/pod/cmd/node/rpc"
	"github.com/p9c/pod/pkg/rpc/json"
	"github.com/p9c/pod/pkg/rpc/legacy"
)

// Statusbar contains the controls to the statusbar
type Statusbar struct {
	*fyne.Container
	Ticker   *time.Ticker
	Context  *con.Text
	App      fyne.App
	Window   fyne.Window
	Balance  *widget.Label
	Box      *widget.Box
	Progress *widget.ProgressBar
}

// NewStatusbar creates a new statusbar
func NewStatusbar(cx *con.Text, a fyne.App, w fyne.Window) (out Statusbar) {
	out.Context = cx
	out.App = a
	out.Window = w
	out.Progress = widget.NewProgressBar()
	out.Progress.Value = 0.5
	out.Balance = widget.NewLabel("Balance: 100.00 DUO")
	syncwidget := widget.NewLabel("syncing")
	out.Box = widget.NewHBox(
		layout.NewSpacer(),
		syncwidget,
		out.Progress,
	)
	out.Container = fyne.NewContainerWithLayout(
		layout.NewGridLayout(2),
		out.Balance,
		out.Box,
	)
	out.Window = w
	out.Ticker = time.NewTicker(time.Second)
	go func() {
		for t := range out.Ticker.C {
			_ = t
			if out.Context.Node.Load().(bool) && cx.RPCServer != nil {
				if cx.RPCServer != nil {
					if cx.RPCServer.StateCfg != nil {
						var inforesult *json.InfoChainResult
						var inforesult0 *json.InfoChainResult0
						var ok bool
						gg, err := rpc.HandleGetInfo(cx.RPCServer, nil, nil)
						if err == nil {
							inforesult, ok = gg.(*json.InfoChainResult)
							if ok {
								synctext := fmt.Sprintf("height %d peers %d",
									inforesult.Blocks,
									inforesult.Connections)
								syncwidget.SetText(synctext)
							}
							inforesult0, ok = gg.(*json.InfoChainResult0)
							if ok {
								synctext := fmt.Sprintf("height %d peers %d",
									inforesult0.Blocks,
									inforesult0.Connections)
								syncwidget.SetText(synctext)
							}
						}
					}
				}
			}
			if out.Context.Wallet.Load().(bool) && cx.WalletServer != nil {
				acct := "*"
				minconf := 0
				bb, err := legacy.GetBalance(&json.GetBalanceCmd{
					Account: &acct,
					MinConf: &minconf,
				}, cx.WalletServer)
				if err == nil {
					newbalance := fmt.Sprintf("Balance: %0.8f DUO", bb)
					if newbalance != out.Balance.Text {
						out.Balance.SetText(newbalance)
					}
				}
			}
		}
	}()
	return
}
